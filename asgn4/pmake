#!/usr/bin/perl
# $Id: pmake,v 1.37 2021-02-24 13:17:46-08 - - $

# Ethan Henry (efhenry@ucsc.edu)
# Christopher Oey (caoey@ucsc.edu)

$0 =~ s|.*/||;
use Getopt::Std;
use Data::Dumper;
use strict;
use warnings;

$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse = 1;
sub dump_hash ($\%) {
   my ($label, $hashptr) = @_;
   print STDERR "%$label: ", Data::Dumper->Dump ([$hashptr]);
}

my $STATUS = 0;
END { exit $STATUS; }
$SIG{'__WARN__'} = sub { print STDERR @_; $STATUS = 1; };
$SIG{'__DIE__'} = sub { print STDERR @_; $STATUS = 1; exit; };

# sigtoperl: x86_64 Linux unix1.lt.ucsc.edu
# sigtoperl: Sun Nov 22 17:33:55 2020
my %strsignal = (
    0 => "Unknown signal 0",
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   10 => "User defined signal 1",
   11 => "Segmentation fault",
   12 => "User defined signal 2",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped",
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   23 => "Urgent I/O condition",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);

sub run_command (@) {
   my (@command) = @_;
   my $status = eval {no warnings; system @command};
   return undef unless $status;
   return "$!" if $status == -1;
   my $signal = $status & 0x7F;
   my $core = $status & 0x80;
   my $exit = ($status >> 8) & 0xFF;
   return "Error $exit" unless $signal || $core;
   return ($strsignal{$signal} || "Invalid Signal Number $signal")
        . ($core ? " (core dumped)" : "");
}

my $MAKECMDGOALS;
my $Makefile = "Makefile";
my %OPTIONS;
my %GRAPH;
my %MACROS;
my %VISITED;

sub mtime {
    my @status = stat "@_";
    return @status ? $status[9] : undef;
}

sub usage() { die "Usage: $0 [-mgd] [target]\n" }
sub stop($) { die "$Makefile:@_. Stop.\n" }

sub scan_cmdline() {
   getopts "dgm", \%OPTIONS;
   usage unless @ARGV <= 1;
   $MAKECMDGOALS = $ARGV[0] if @ARGV == 1;
}

sub dump_graph() {
   print "TEST 3\n";
   print STDERR "%MACROS:\n";
   for my $macro (sort keys %MACROS) {
      printf STDERR "%7d [%s] = [%s]\n",
             $MACROS{$macro}{LINE}, $macro, $MACROS{$macro}{VALUE};
   }
   print STDERR "MAKECMDGOALS = [$MAKECMDGOALS]\n";
   print STDERR "%GRAPH:\n";
   for my $target (sort keys %GRAPH) {
      my $prereqs = $GRAPH{$target}{PREREQS};
      printf STDERR "%7d [%s] :", $GRAPH{$target}{LINE}, $target;
      print STDERR " [$_]" for @$prereqs;
      print STDERR "\n";
      for my $cmd (@{$GRAPH{$target}{COMMANDS}}) {
         printf STDERR "%7d.\t[%s]\n", $cmd->{LINE}, $cmd->{CMD};;
      }
   }
}

sub load_Makefile() {
   open my $mkfile, "<$Makefile" or die "$0: $Makefile: $!";
   my $target;
   while (defined (my $line = <$mkfile>)) {
      next if $line =~ m/^\s*(#|$)/;
      if (!$target && $line =~ m/^\s*(\S+)\s*=\s*(.*?)\s*$/) {
         $MACROS{$1} = {LINE=> $., VALUE=> $2};
      }elsif ($line =~ m/^(\S+)\s*:\s*(.*)/) {
         my $targ = $1;
        map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge} $targ;
         $target = $targ;
         my $tar = $2;
             map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge} $tar;
         $GRAPH{$target}{PREREQS} = [split ' ', $tar];
         $GRAPH{$target}{LINE} = $.;
         $MAKECMDGOALS = $target unless $MAKECMDGOALS;
      }elsif ($line =~ m/^\t(.*)/) {
         if (defined $target) { 
            push @{$GRAPH{$target}{COMMANDS}},
                 {LINE=> $., CMD=> $1};
         }else {
            stop "$.: Command before first target";
         }
      }else {
         stop "$.: Missing separator";
      }
   }
   close $mkfile;
}

sub get_time($) {
    my ($filename) = @_;
    my @stat = stat $filename;
    return @stat ? $stat[9] : undef;
}



sub get_newest_time($) {
    my ($goal) = @_;
    my $newest = 0;
    if (scalar(@{$GRAPH{$goal}->{PREREQS}}) == 0) {
        return 0;
    } else {
        $newest = get_time($GRAPH{$goal}->{PREREQS}[0]);
        if (!$newest) {
            return($newest);
        }
        foreach (@{$GRAPH{$goal}->{PREREQS}}) {
            if ((get_time($_)) > $newest) {
                $newest = get_time($_);
            }
        }
    }
    return($newest);
}


sub do_make {
    my ($goal) = @_;
    my $error;
    my $copy = $goal;
    if ((exists $VISITED{$goal}) and ($VISITED{$goal} == 1)) {
        return(0);
    }

    my $test = 
    map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge} $goal;
    map {$_ =~ s/\$</$GRAPH{$goal}->{PREREQS}/} $goal;
    map {$_ =~ s/\$\$/\$/} $goal;
    my $bool = 0;
    my $cmd_bool = 0;
    my $salad = 0;
    foreach my $target (keys %GRAPH) {
        map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge, 
        $_ =~ s/\$</$GRAPH{$goal}->{PREREQS}/, 
        $_ =~ s/\$\$/\$/} $target;
        if (($goal =~ /(\.o)/m) and (exists $GRAPH{"%.o"})) {
            my $potato = substr($goal, 0, -2);
            $potato = $potato . ".c";
            foreach my $timito (@{$GRAPH{$copy}->{PREREQS}}) {
                if ($timito eq $potato) {
                    $GRAPH{$copy}->{COMMANDS}[0]->{CMD} = 
                      $GRAPH{"%.o"}->{COMMANDS}[0]->{CMD};
                }
            }
        }
        if ($target eq $goal) {
            $bool = 1;
            if ($GRAPH{$copy}->{COMMANDS}[0]->{CMD}) {
                $cmd_bool = 1;
            }
        }
    }

    if ($bool) {
        $VISITED{$copy} = 1;
    }

    if ((-e $goal) and ($bool)) {
        if ($MAKECMDGOALS eq $copy) {
            print "pmake: '$goal' is already up to date.\n";
            return(0);
        } else {
            return(0);
        }
    } elsif (!(-e $goal) and ($bool) and 
      (!($cmd_bool)) and (get_newest_time($goal))) {
        if ($MAKECMDGOALS eq $copy) {
            print "pmake: Nothing to be done for '$goal'.\n";
            return(0);
        } else {
            return(0);
        }
    }



    if ($goal =~ /([ ])\w+/g) {
        my @temp = split(' ', $goal);
        foreach (@temp) {
            do_make($_);
        }
    } else {
        if (!($bool)) {
            if (-e $goal) {
                return(get_time($goal));
            } else {
                die 
                "pmake: *** No rule to make target '$goal'. Stop.\n";
            }  
        }


        foreach (@{$GRAPH{$copy}->{PREREQS}}) {
             if (!($_ =~ /([ ])\w+/g)) {
                do_make($_);
            }
        }
        if (($cmd_bool) and (!(-e $goal))) {
            my $command = $GRAPH{$copy}->{COMMANDS}[0]->{CMD};
                map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge,
                $_ =~ s/\$\$/\$/} $command;
                if (@{$GRAPH{$copy}->{PREREQS}}[0]) {
                    map {$_ =~ s/\$</@{$GRAPH{$copy}->{PREREQS}}[0]/} 
                      $command;
                }
            my $new_command;
            if ($command !~ m/^\s*(@)/) {
                $new_command = $command;
                if ($command =~ m/^\s*(-)/) {
                    $new_command = substr($command, 2);
                }
                print "$new_command\n";
            } else {
                $new_command = substr($command, 2);
            } 
            if (!(-e $goal) or 
              (get_newest_time($goal) > get_time($goal))) {
                $error = run_command($new_command);
                if (defined $error) {
                    my $ln = $GRAPH{$copy}->{LINE} + 1;
                    if ($command =~ m/^\s*(-)/) {
                        print STDERR "pmake: [Makefile:$ln: $goal] "
                         . "$error (ignored)\n";
                    } else {
                        die "pmake: *** [Makefile:$ln: $goal] "
                             . "$error.\n";
                    }
                } else {
                    return(get_time($goal));
                }
            }
        }
    }
}

scan_cmdline;
load_Makefile;

dump_hash ("MACROS", %MACROS) if $OPTIONS{'m'};
dump_hash ("GRAPH", %GRAPH) if $OPTIONS{'g'};
dump_graph if $OPTIONS{'d'};

do_make($MAKECMDGOALS);
