#!/usr/bin/perl
# $Id: pmake,v 1.37 2021-02-24 13:17:46-08 - - $

# Ethan Henry (efhenry@ucsc.edu)
# Christopher Oey (caoey@ucsc.edu)

$0 =~ s|.*/||;
use Getopt::Std;
use Data::Dumper;
use strict;
use warnings;

$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse = 1;
sub dump_hash ($\%) {
   my ($label, $hashptr) = @_;
   print STDERR "%$label: ", Data::Dumper->Dump ([$hashptr]);
}

my $STATUS = 0;
END { exit $STATUS; }
$SIG{'__WARN__'} = sub { print STDERR @_; $STATUS = 1; };
$SIG{'__DIE__'} = sub { print STDERR @_; $STATUS = 1; exit; };

# sigtoperl: x86_64 Linux unix1.lt.ucsc.edu
# sigtoperl: Sun Nov 22 17:33:55 2020
my %strsignal = (
    0 => "Unknown signal 0",
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   10 => "User defined signal 1",
   11 => "Segmentation fault",
   12 => "User defined signal 2",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped",
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   23 => "Urgent I/O condition",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);

#IGNORE EVERYTHING ABOVE

sub run_command (@) {
   #CHANGE WHETHER PRINTS OUT COMMAND BEFORE RUNNING IT
#   print "TEST\n";
   my (@command) = @_;
   #print "$command[0]\n";
   #print @command[0]. "\n";
   my $status = eval {no warnings; system @command};
   return undef unless $status;
   return "$!" if $status == -1;

   #IGNORE BELOW
   my $signal = $status & 0x7F;
   my $core = $status & 0x80;
   my $exit = ($status >> 8) & 0xFF;
   return "Error $exit" unless $signal || $core;
   return ($strsignal{$signal} || "Invalid Signal Number $signal")
        . ($core ? " (core dumped)" : "");
}

my $MAKECMDGOALS;
my $Makefile = "Makefile";
my %OPTIONS;
my %GRAPH;
my %MACROS;

sub mtime {
    my @status = stat "@_";
    return @status ? $status[9] : undef;
}

sub usage() { die "Usage: $0 [-mgd] [target]\n" }
sub stop($) { die "$Makefile:@_. Stop.\n" }

sub scan_cmdline() {
#   print "TEST 2\n";
   getopts "dgm", \%OPTIONS;
   usage unless @ARGV <= 1;
   $MAKECMDGOALS = $ARGV[0] if @ARGV == 1;
}

sub dump_graph() {
   print "TEST 3\n";
   print STDERR "%MACROS:\n";
   for my $macro (sort keys %MACROS) {
      printf STDERR "%7d [%s] = [%s]\n",
             $MACROS{$macro}{LINE}, $macro, $MACROS{$macro}{VALUE};
   }
   print STDERR "MAKECMDGOALS = [$MAKECMDGOALS]\n";
   print STDERR "%GRAPH:\n";
   for my $target (sort keys %GRAPH) {
      my $prereqs = $GRAPH{$target}{PREREQS};
      printf STDERR "%7d [%s] :", $GRAPH{$target}{LINE}, $target;
      print STDERR " [$_]" for @$prereqs;
      print STDERR "\n";
      for my $cmd (@{$GRAPH{$target}{COMMANDS}}) {
         printf STDERR "%7d.\t[%s]\n", $cmd->{LINE}, $cmd->{CMD};;
      }
   }
}

#IGNORE LOAD MAKEFILE

#sub get_sub_complex {
#    my ($goal) = @_;
#    if ($goal =~ m/^\s*(\$\{)/) {
#        $goal = substr($goal, 2, -1);
#    } elsif (
#    if (!(exists $MACROS{$goal})) {
#        return $goal;
#    } else {
#        return($MACROS{$goal}->{VALUE});
#    }
#
#}

#sub get_sub {
#    my ($goal) = @_;
#    my $word = ' ';
#    my @sp = split(' ', $goal);
#    if (scalar(@sp) > 1) {
#        foreach (@sp) {
#            $word = $word . ' ' . get_sub_complex($_);
#        }
#        return $word;
#    }
#    if ($goal =~ m/^\s*(\$\{)/) {
#        $goal = substr($goal, 2, -1);
#    }
#    if (!(exists $MACROS{$goal})) {
#        return ($goal);
#    } else {
#        return($MACROS{$goal}->{VALUE});
#    }
#}

sub load_Makefile() {
   open my $mkfile, "<$Makefile" or die "$0: $Makefile: $!";
   my $target;
   while (defined (my $line = <$mkfile>)) {
      next if $line =~ m/^\s*(#|$)/;
      if (!$target && $line =~ m/^\s*(\S+)\s*=\s*(.*?)\s*$/) {
         $MACROS{$1} = {LINE=> $., VALUE=> $2};
      }elsif ($line =~ m/^(\S+)\s*:\s*(.*)/) {
         $target = $1;
         $GRAPH{$target}{PREREQS} = [split ' ', $2];
         $GRAPH{$target}{LINE} = $.;
         $MAKECMDGOALS = $target unless $MAKECMDGOALS;
      }elsif ($line =~ m/^\t(.*)/) {
         if (defined $target) { 
            push @{$GRAPH{$target}{COMMANDS}},
                 {LINE=> $., CMD=> $1};
         }else {
            stop "$.: Command before first target";
         }
      }else {
         stop "$.: Missing separator";
      }
   }
   close $mkfile;
}

sub get_time($) {
    my ($filename) = @_;
    my @stat = stat $filename;
    return @stat ? $stat[9] : undef;
}



sub get_newest_time($) {
    my ($goal) = @_;
    my $newest = 0;
    if (scalar(@{$GRAPH{$goal}->{PREREQS}}) == 0) {
        return 0;
    } else {
        $newest = get_time($GRAPH{$goal}->{PREREQS}[0]);
        foreach (@{$GRAPH{$goal}->{PREREQS}}) {
            if ((get_time($_)) > $newest) {
                $newest = get_time($_);
            }
        }
    }
    return($newest);
}



#sub get_sub {
#    my ($goal) = @_;
#    print "GOAL: $goal\n";
#    if ($goal =~ m/^\s*(\$\{)/) {
#        $goal = substr($goal, 2, -1);
#    }
#    if (!(exists $MACROS{$goal})) {
#        return ($goal);
#    } else {
#        return($MACROS{$goal}->{VALUE});
#    }
#}

#ADD CMDS?  Otherwise won't work.  If we do, we've basically just remade GRAPH
#Sohum said the strategy was to compare each target in the hash to the goal you're currently checking
sub hash_target {
    my %hash;
    for my $target (keys %GRAPH) {
        my @temp_3;
        my $copy = $target;
        map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge} $target;
        map {$_ =~ s/\$</$GRAPH{$target}->{PREREQS}/} $target;
        map {$_ =~ s/\$\$/\$/} $target;
        my $copy_2 = $GRAPH{$copy}->{COMMANDS}[0]->{CMD};
        if ($copy_2) {
            map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge} $copy_2;
            map {$_ =~ s/\$</$GRAPH{$target}->{PREREQS}/} $copy_2;
            map {$_ =~ s/\$\$/\$/} $copy_2;
            print "$copy_2\n";
        }
#        push(@temp_3, $copy_2);
        my @x = @{$GRAPH{$copy}->{PREREQS}};
            my @temp;
            my @temp_2;
            foreach (@x) {
#                    print "$_\n";
                    map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge} $_;
                    map {$_ =~ s/\$</$GRAPH{$copy}->{PREREQS}/} $_;
                    map {$_ =~ s/\$\$/\$/} $_;
                @temp = split(' ', $_);
                foreach (@temp) {
                    push(@temp_2, $_);
                }
            }
#        push ($hash{$target}, \@x);
        push(@temp_3, \@temp_2);
        push(@temp_3, $copy_2);
        $hash{$target} = \@temp_3;
    }
    my $test = @{$hash{hello}}[1];
    print "\nHERE: $test\n\n";
    return %hash;
}

sub do_make {
    my ($goal, %hash_tar) = @_;
    my $error; 
#    print "GOAL $goal\n";
    my $test = map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge} $goal;
    map {$_ =~ s/\$</$GRAPH{$goal}->{PREREQS}/} $goal;
    map {$_ =~ s/\$\$/\$/} $goal;
#    print "DECODED GOAL: $goal\n";
    my $bool = 0;
#    foreach (@arr_tar) {
#        if ($goal eq $_) {
#            $bool = 1;
#            print "$_\n";
#        }
#    }
    print "THERE: @{$hash_tar{$goal}}[0]\n";
    if (!(exists @{$hash_tar{$goal}}[0])) {
        if (-e $goal) {
            return(get_time($goal));
        } else {
#            print "GOAL: $goal\n";
            die "DON'T KNOW HOW\n";
        }  
    }
#    my @temp_test = @{$hash_tar{all}};
    sleep 1;
#    print "TEST: @{$hash_tar{$goal}}\n";
    foreach (@{$hash_tar{$goal}}) {
#        print "PREREQS: $_\n";
        do_make($_, %hash_tar);
    }
#   print "CMD: $GRAPH{$goal}->{COMMANDS}[0]\n";    
    if (exists $GRAPH{$goal}->{COMMANDS}[0]->{CMD}) {

    my $command = $GRAPH{$goal}->{COMMANDS}[0]->{CMD};
    my $new_command;
    
    map {$_ =~ s/\${(.*?)}/$MACROS{$1}->{VALUE}||""/ge} $command;
    map {$_ =~ s/\$</$GRAPH{$goal}->{PREREQS}/} $command;
    map {$_ =~ s/\$\$/\$/} $command;
    
    if (!($command =~ m/^\s*(@)/)) {
        print "$command\n";
        $new_command = $command;
    } else {
        $new_command = substr($command, 2);
    } 

    if ($command =~ m/^\s*(-)/) {
#        print "$command\n";
        $new_command = substr($command, 2);
    }
    print "$command\n";
    # TYPE SHIT IN HERE BITCH
    # LOOK AT THE TXT FILE
#    print "$GRAPH{all}->{COMMANDS}[0]->{CMD}\n"; #PRINTS COMMAND TO BE RUN
#    print "$GRAPH{all}->{PREREQS}[0]\n"; #PRINTS THE FIRST PREREQ
#    print "$GRAPH{bar}->{COMMANDS}[0]->{CMD}\n";
#    print "$goal\n";
#    print "$GRAPH{$goal}->{COMMANDS}[0]->{CMD}\n"; #PRINTS THE ABOVE CODE FOR GOAL EXAMPLE: ./pmake foo prints foo's CMD
    if (!(-e $goal) or (get_newest_time($goal) > get_time($goal))) {
        $error = run_command($new_command);
        if (defined $error) {
            my $lnnum = $GRAPH{$goal}->{LINE} + 1;
            if ($command =~ m/^\s*(-)/) {
#                my $lnnum = $GRAPH{$goal}->{LINE} + 1;
                print "make: [Makefile:$lnnum: $goal] $error (ignored)\n";
            } else {
                die "make: *** [Makefile:$lnnum: $goal] $error\n";
            }
        }
    } else {
        print "make: '$goal' is already up to date\n";
        return(0);
    }
    }

}

scan_cmdline;
load_Makefile;

dump_hash ("MACROS", %MACROS) if $OPTIONS{'m'};
dump_hash ("GRAPH", %GRAPH) if $OPTIONS{'g'};
dump_graph if $OPTIONS{'d'};

do_make($MAKECMDGOALS, hash_target());
